;; our dot-emacs is a lisp file
(add-to-list 'auto-mode-alist '("\\dot-emacs\\'" . emacs-lisp-mode))

;; Show column
(setq column-number-mode t)

;; Start with a custom default window size.
(when window-system (set-frame-size (selected-frame) 200 60))

;; And set a custom window title
(setq frame-title-format '("emacs - " (buffer-file-name "%f" (dired-directory dired-directory "%b"))))

;; But add a keybinding to show current file.
(defun show-file-name ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name))
  (kill-new (file-truename buffer-file-name))
)
(global-set-key "\C-cz" 'show-file-name)

;; Presentation mode settings -- disabled by default
(defvar presentation-mode-enabled nil)
;;(defun toggle-presentation-mode () (print 'abc))
(defun toggle-presentation-mode () "toggle between presentation and normal mode"
			 (interactive)
			 (setq presentation-mode-enabled
						 (if presentation-mode-enabled
								 (progn
									 (message "Disabling presentation mode")
									 (set-face-attribute 'default nil :height 100)
									 (load-theme 'zenburn t)
									 (when window-system (set-frame-size (selected-frame) 200 60))
									 nil)
							 (progn
								 (message "Enabling presentation mode")
								 (set-face-attribute 'default nil :height 240)
								 (load-theme 'leuven t)
								 t))))

(global-set-key (kbd "<f12>") 'toggle-presentation-mode)

;; dot-emacs file
(global-set-key (kbd "<f9>") 
								(lambda()(interactive)(find-file "~/.emacs")))

;; neotree file listing
(global-set-key (kbd "<f8>") 'neotree-toggle)

;; Don't ask what to do with active processes -- kill them anyway.
(defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
	"Prevent annoying \"Active processes exist\" query when you quit Emacs."
	(flet ((process-list ())) ad-do-it))

;; No stupid backup files
(setq make-backup-files nil)

;; No welcome screen
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(package-selected-packages
	 (quote
		(magit haskell-mode paredit cider markdown-preview-mode zenburn-theme yaml-mode web-mode tide tdd-status-mode-line swiper solarized-theme rust-mode neotree markdown-mode leuven-theme json-mode indent-guide go-mode go-autocomplete flymake-yaml flymake-go find-file-in-project elm-mode company browse-kill-ring avy))))

;; And disable the audible bell
(setq ring-bell-function 'ignore)

;; Smarter tab completion
(setq tab-always-indent 'complete)

;; Company mode dabbrev should not downcase by default (in text mode)
(setq company-dabbrev-downcase nil)

;; And smarter start of line -- http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)

;; Enable avy
;;(global-set-key (kbd "M-g w") 'avy-goto-word-or-subword-1)
(global-set-key (kbd "M-g w") 'avy-goto-word-1)

;; Updating packages: M-x package-list-packages, type U (mark Upgradable packages) and then x (eXecute the installs and deletions). Then y (confirm deletion)
(setq package-list '(
										 avy
										 browse-kill-ring
										 cider
										 cl
										 company
										 elm-mode
										 flymake-go
										 find-file-in-project
										 go-autocomplete
										 go-mode
										 haskell-mode
										 ido
										 indent-guide
										 json-mode
										 leuven-theme
										 magit
										 markdown-mode
										 markdown-preview-mode
										 neotree
										 paredit
										 rust-mode
										 tide
										 web-mode
										 yaml-mode
										 zenburn-theme
										 ))

;; Register package archives
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(package-initialize)

;; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;; Tab width
(setq default-tab-width 2)
;; Disable tab indenting
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)

;; whenever I do M-x revert-buffer I am annoyed by having to type 'yes'
(global-set-key "\C-x\C-r" '(lambda() (interactive) (revert-buffer 1 1 1)))

;; Graphical stuff
(load-theme 'zenburn t)

(show-paren-mode)
(set-scroll-bar-mode 'right)
(setq scroll-margin 3)

;; cider (clojure)
;; starting the repl: C-c M-j || connecting: C-c M-c
;; Paredit-mode cheat sheet https://emacswiki.org/emacs/PareditCheatsheet
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'clojure-mode-hook #'enable-paredit-mode)

;;Geen toolbar in windowed mode
(if window-system (tool-bar-mode 0))
;;Geen menu bar
(menu-bar-mode -1)
;;Fullscreen wanneer er op F11 gedrukt word. 
(defun fullscreen ()
	(interactive)
	(set-frame-parameter nil 'fullscreen
											 (if (frame-parameter nil 'fullscreen) nil 'fullboth)))
(global-set-key [f11] 'fullscreen)

;; And I prefer not to use Alt (SunOS anyone?)
(global-set-key "\C-x\C-b" 'execute-extended-command)
(global-set-key "\C-c\C-b" 'execute-extended-command)

;; M-Backspace/backward-kill-word to C-w. I hardly use kill-region anyway. 
(global-set-key "\C-w" 'backward-kill-word)
;; And kill-region to C-x-C-k
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

;; isearch-forward and isearch-backward are great, but isearch-{forward,backward}-regexp is usefull to.
(global-set-key "\M-s" 'isearch-forward-regexp)
(global-set-key "\M-r" 'isearch-backward-regexp)

(global-set-key "\C-x\C-m" 'recompile)

;; Default compile command make -k is useless -- set it to empty because of tdd.el
(setq compile-command "")

;; Follow symlinks automatically
(setq vc-follow-symlinks t)

;; (defun compilation-exit-autoclose (status code msg)
;;   ;; If M-x compile exists with a 0
;;   (when (and (eq status 'exit) (zerop code))
;; 		;; then bury the *compilation* buffer, so that C-x b doesn't go there
;; 		(bury-buffer)
;; 		;; and delete the *compilation* window
;; 		(delete-window (get-buffer-window (get-buffer "*compilation*"))))
;;   ;; Always return the anticipated result of compilation-exit-message-function
;;   (cons msg code))
;; ;; Specify my function (maybe I should have done a lambda function)
;; (setq compilation-exit-message-function 'compilation-exit-autoclose)

;; Close the compilation window if there was no error at all.
(setq compilation-exit-message-function
			(lambda (status code msg)
				;; If M-x compile exists with a 0
				(when (and (eq status 'exit) (zerop code))
					;; then bury the *compilation* buffer, so that C-x b doesn't go there
					(bury-buffer "*compilation*")
					;; and return to whatever were looking at before
					(replace-buffer-in-windows "*compilation*"))
				;; Always return the anticipated result of compilation-exit-message-function
				(cons msg code)))

;;;;;;;; plugins

;; TDD-related
(load-file "~/.emacs.d/tdd.el")
(add-hook 'after-init-hook 'tdd-mode)
 
;; Company mode
(add-hook 'after-init-hook 'global-company-mode)

;; Yaml
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

;; Go golang
;; Additional requirements: go get -u github.com/nsf/gocode
(setq exec-path (append exec-path '("/home/kevin/go/bin")))
(require 'cl)
(require 'go-autocomplete)
(require 'auto-complete-config)
(require 'flymake-go)
;; TODO
(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)

(add-hook 'before-save-hook 'gofmt-before-save)
(ac-config-default)

;; Typescript
(require 'tide)
(add-hook 'typescript-mode-hook
          (lambda ()
            (tide-setup)
            (flycheck-mode +1)
            (setq flycheck-check-syntax-automatically '(save mode-enabled))
            (eldoc-mode +1)
            (company-mode-on)))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; Tide can be used along with web-mode to edit tsx files
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (tide-setup)
              (flycheck-mode +1)
              (setq flycheck-check-syntax-automatically '(save mode-enabled))
              (eldoc-mode +1)
              (company-mode-on))))

;; JSON
;; C-c C-f for reformatting json
(require 'json-mode)
(setq json-reformat:pretty-string? t)

;; file tree
(require 'find-file-in-project)
(require 'neotree)
(setq neo-smart-open t)
(defun neotree-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (ffip-project-root))
        (file-name (buffer-file-name)))
    (if project-dir
        (progn
          (neotree-dir project-dir)
          (neotree-find file-name))
      (message "Could not find git project root."))))

;;(define-key map (kbd "C-c C-p") 'neotree-project-dir)

;; elm-mode
(require 'elm-mode)

;; Prolog pl
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
(setq prolog-system 'swi)

;; Flyspell
(dolist (hook '(text-mode-hook))
	(add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(LaTeX-mode-hook))
	(add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(markdown-mode-hook))
	(add-hook hook (lambda () (flyspell-mode 1))))
(setq-default ispell-program-name "aspell")
(setq ispell-dictionary "nl")

;; Rust mode
(require 'rust-mode)
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

;; ido mode
(require 'ido)
;;Tab completion met ido in minibuffer
(ido-mode t) ;; for buffers and files
(setq 
 ido-ignore-buffers ;; ignore onderstaande buffers
 '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido")
 ido-work-directory-list '("~/")
 ido-everywhere t                 ;; Hoe meer hoe beter. 
 ido-case-fold  t                 ;; niet hoofdlettergevoelig met completion
 ido-use-filename-at-point nil    ;; don't use filename at point (annoying)
 ido-use-url-at-point nil         ;;  don't use url at point (annoying)
 ido-enable-flex-matching t       ;; be flexible
 ido-max-prospects 4              ;; don't spam my minibuffer
 ido-confirm-unique-completion t) ;; wait for RET, even with unique completion
;; fix voor tab complete hierboven
(add-hook 'ido-setup-hook    
          (lambda () 
            (define-key ido-completion-map [tab] 'ido-complete)))

;;Indent grootte
(setq standard-indent 2)
;;Huidige regel highlighten. Niet meer ivm zenburn
(global-hl-line-mode 1)

;; kill ring
(when (require 'browse-kill-ring nil 'noerror)
  (browse-kill-ring-default-keybindings))

;; Indent guide:
(require 'indent-guide)

;; Markdown mode
;; C-c C-c l: markdown-live-preview-mode
;; http://jblevins.org/projects/markdown-mode/
(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; JavaScript
(add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
(add-hook 'js-mode-hook
  (lambda ()
    (make-variable-buffer-local 'tab-width)
    (make-variable-buffer-local 'indent-tabs-mode)
    (setq js-indent-level 2)
    (setq tab-width 2)
    (setq indent-tabs-mode nil)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; key bindings for sane mac bindings
(when (eq system-type 'darwin)
  ;; not sure yet
  (setq mac-option-modifier 'alt)
  (setq mac-command-modifier 'control)
  )
