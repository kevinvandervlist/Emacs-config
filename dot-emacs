;; our dot-emacs is a lisp file
(add-to-list 'auto-mode-alist '("\\dot-emacs\\'" . emacs-lisp-mode))

(global-set-key (kbd "<f9>") 
(lambda()(interactive)(find-file "~/.emacs")))

;; No stupid backup files
(setq make-backup-files nil)

;; No welcome screen
(custom-set-variables '(inhibit-startup-screen t))

(setq package-list '(
										 browse-kill-ring
										 cl
										 flymake-go
										 go-autocomplete
										 go-mode
										 ido
										 indent-guide
										 markdown-mode
										 rust-mode
										 zenburn-theme
										 ))

;; Register package archives
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(package-initialize)

;; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;; Tab width
(setq default-tab-width 2)
;; Disable tab indenting
(setq indent-tabs-mode nil)

;; whenever I do M-x revert-buffer I am annoyed by having to type 'yes'
(global-set-key "\C-x\C-r" '(lambda() (interactive) (revert-buffer 1 1 1)))

;; Graphical stuff
(load-theme 'zenburn t)

(show-paren-mode)
(set-scroll-bar-mode 'right)
(setq scroll-margin 3)

;;Geen toolbar in windowed mode
(if window-system (tool-bar-mode 0))
;;Geen menu bar
(menu-bar-mode -1)
;;Fullscreen wanneer er op F11 gedrukt word. 
(defun fullscreen ()
	(interactive)
	(set-frame-parameter nil 'fullscreen
											 (if (frame-parameter nil 'fullscreen) nil 'fullboth)))
(global-set-key [f11] 'fullscreen)

;; And I prefer not to use Alt (SunOS anyone?)
(global-set-key "\C-x\C-b" 'execute-extended-command)
(global-set-key "\C-c\C-b" 'execute-extended-command)

;; M-Backspace/backward-kill-word to C-w. I hardly use kill-region anyway. 
(global-set-key "\C-w" 'backward-kill-word)
;; And kill-region to C-x-C-k
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

;; isearch-forward and isearch-backward are great, but isearch-{forward,backward}-regexp is usefull to.
(global-set-key "\M-s" 'isearch-forward-regexp)
(global-set-key "\M-r" 'isearch-backward-regexp)

;; C-x C-b (switch buffer becomes recompile)
(global-set-key "\C-x\C-m" 'recompile)

(defun compilation-exit-autoclose (status code msg)
  ;; If M-x compile exists with a 0
  (when (and (eq status 'exit) (zerop code))
		;; then bury the *compilation* buffer, so that C-x b doesn't go there
		(bury-buffer)
		;; and delete the *compilation* window
		(delete-window (get-buffer-window (get-buffer "*compilation*"))))
  ;; Always return the anticipated result of compilation-exit-message-function
  (cons msg code))
;; Specify my function (maybe I should have done a lambda function)
(setq compilation-exit-message-function 'compilation-exit-autoclose)

;;;;;;;; plugins
;; Go golang
;; Additional requirements: go get -u github.com/nsf/gocode
(setq exec-path (append exec-path '("/home/kevin/go/bin")))
(require 'cl)
(require 'go-autocomplete)
(require 'auto-complete-config)
(require 'flymake-go)
;; TODO
;(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
(add-hook 'before-save-hook 'gofmt-before-save)
(ac-config-default)

;; Rust mode
(require 'rust-mode)
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

;; ido mode
(require 'ido)
;;Tab completion voor buffer switching. 
(iswitchb-mode t)
;;Tab completion met ido in minibuffer
(ido-mode t) ;; for buffers and files
(setq 
 ido-ignore-buffers ;; ignore onderstaande buffers
 '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido")
 ido-work-directory-list '("~/")
 ido-everywhere t                 ;; Hoe meer hoe beter. 
 ido-case-fold  t                 ;; niet hoofdlettergevoelig met completion
 ido-use-filename-at-point nil    ;; don't use filename at point (annoying)
 ido-use-url-at-point nil         ;;  don't use url at point (annoying)
 ido-enable-flex-matching t       ;; be flexible
 ido-max-prospects 4              ;; don't spam my minibuffer
 ido-confirm-unique-completion t) ;; wait for RET, even with unique completion
;; fix voor tab complete hierboven
(add-hook 'ido-setup-hook    
          (lambda () 
            (define-key ido-completion-map [tab] 'ido-complete)))

;;Indent grootte
(setq standard-indent 2)
;;Huidige regel highlighten. Niet meer ivm zenburn
(global-hl-line-mode 1)

;; kill ring
(when (require 'browse-kill-ring nil 'noerror)
  (browse-kill-ring-default-keybindings))

;; Indent guide:
(require 'indent-guide)

;; Markdown 
(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; JavaScript
(add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
(add-hook 'js-mode-hook
  (lambda ()
    (make-variable-buffer-local 'tab-width)
    (make-variable-buffer-local 'indent-tabs-mode)
    (setq js-indent-level 2)
    (setq tab-width 2)
    (setq indent-tabs-mode nil)))
